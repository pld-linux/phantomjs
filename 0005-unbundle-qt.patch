From 82ce4028e1883b4c1fee98be04548698e2ca6c6d Mon Sep 17 00:00:00 2001
From: Dan Callaghan <dcallagh@redhat.com>
Date: Fri, 3 Aug 2012 12:17:32 +1000
Subject: [PATCH 5/8] unbundle qt


diff --git a/src/config.cpp b/src/config.cpp
index 226c98f..2bf3fdb 100644
--- a/src/config.cpp
+++ b/src/config.cpp
@@ -168,7 +168,11 @@ void Config::loadJsonFile(const QString &filePath)
     // Add this object to the global scope
     webPage.mainFrame()->addToJavaScriptWindowObject("config", this);
     // Apply the JSON config settings to this very object
-    webPage.mainFrame()->evaluateJavaScript(configurator.arg(jsonConfig), QString());
+    webPage.mainFrame()->evaluateJavaScript(configurator.arg(jsonConfig)
+#ifdef HAVE_QT_JS_STACK_TRACES
+            , QString()
+#endif
+            );
 }
 
 QString Config::helpText() const
diff --git a/src/csconverter.cpp b/src/csconverter.cpp
index e81303d..6abe1ff 100644
--- a/src/csconverter.cpp
+++ b/src/csconverter.cpp
@@ -49,8 +49,10 @@ CSConverter::CSConverter()
     : QObject(QCoreApplication::instance())
 {
     m_webPage.mainFrame()->evaluateJavaScript(
-        Utils::readResourceFileUtf8(":/coffee-script/extras/coffee-script.js"),
-        QString("phantomjs://coffee-script/extras/coffee-script.js")
+        Utils::readResourceFileUtf8(":/coffee-script/extras/coffee-script.js")
+#ifdef HAVE_QT_JS_STACK_TRACES
+        , QString("phantomjs://coffee-script/extras/coffee-script.js")
+#endif
     );
     m_webPage.mainFrame()->addToJavaScriptWindowObject("converter", this);
 }
@@ -63,8 +65,10 @@ QVariant CSConverter::convert(const QString &script)
         "    [true, this.CoffeeScript.compile(converter.source)];" \
         "} catch (error) {" \
         "    [false, error.message];" \
-        "}",
-        QString()
+        "}"
+#ifdef HAVE_QT_JS_STACK_TRACES
+        , QString()
+#endif
     );
     return result;
 }
diff --git a/src/main.cpp b/src/main.cpp
index 64560aa..ead0562 100644
--- a/src/main.cpp
+++ b/src/main.cpp
@@ -58,10 +58,6 @@ Q_IMPORT_PLUGIN(qico)
 #endif
 #endif
 
-#if QT_VERSION != QT_VERSION_CHECK(4, 8, 4)
-#error Something is wrong with the setup. Please report to the mailing list!
-#endif
-
 int main(int argc, char** argv, const char** envp)
 {
 #ifdef HAVE_BREAKPAD
diff --git a/src/phantom.cpp b/src/phantom.cpp
index 1f31795..efc4449 100644
--- a/src/phantom.cpp
+++ b/src/phantom.cpp
@@ -372,7 +372,11 @@ void Phantom::loadModule(const QString &moduleSource, const QString &filename)
       "require.cache['" + filename + "'].exports," +
       "require.cache['" + filename + "']" +
       "));";
-   m_page->mainFrame()->evaluateJavaScript(scriptSource, filename);
+   m_page->mainFrame()->evaluateJavaScript(scriptSource
+#ifdef HAVE_QT_JS_STACK_TRACES
+        , filename
+#endif
+        );
 }
 
 bool Phantom::injectJs(const QString &jsFilePath)
@@ -419,8 +423,10 @@ void Phantom::onInitialized()
 
     // Bootstrap the PhantomJS scope
     m_page->mainFrame()->evaluateJavaScript(
-                Utils::readResourceFileUtf8(":/bootstrap.js"),
-                QString("phantomjs://bootstrap.js")
+                Utils::readResourceFileUtf8(":/bootstrap.js")
+#ifdef HAVE_QT_JS_STACK_TRACES
+                , QString("phantomjs://bootstrap.js")
+#endif
                 );
 }
 
diff --git a/src/phantomjs.pro b/src/phantomjs.pro
index d453b31..9a690fc 100644
--- a/src/phantomjs.pro
+++ b/src/phantomjs.pro
@@ -6,9 +6,7 @@ CONFIG += console
 DESTDIR = ../bin
 
 RESOURCES = phantomjs.qrc \
-    ghostdriver/ghostdriver.qrc \
-    qt/src/3rdparty/webkit/Source/WebCore/inspector/front-end/WebKit.qrc \
-    qt/src/3rdparty/webkit/Source/WebCore/generated/InspectorBackendStub.qrc
+    ghostdriver/ghostdriver.qrc
 
 HEADERS += csconverter.h \
     phantom.h \
diff --git a/src/repl.cpp b/src/repl.cpp
index 5ac69da..7b1872d 100644
--- a/src/repl.cpp
+++ b/src/repl.cpp
@@ -147,7 +147,11 @@ REPL::REPL(QWebFrame *webframe, Phantom *parent)
     linenoiseSetCompletionCallback(REPL::offerCompletion);
 
     // Inject REPL utility functions
-    m_webframe->evaluateJavaScript(Utils::readResourceFileUtf8(":/repl.js"), QString("phantomjs://repl.js"));
+    m_webframe->evaluateJavaScript(Utils::readResourceFileUtf8(":/repl.js")
+#ifdef HAVE_QT_JS_STACK_TRACES
+            , QString("phantomjs://repl.js")
+#endif
+            );
 
     // Add self to JavaScript world
     m_webframe->addToJavaScriptWindowObject("_repl", this);
@@ -184,8 +188,10 @@ void REPL::offerCompletion(const char *buf, linenoiseCompletions *lc)
     QStringList completions = REPL::getInstance()->m_webframe->evaluateJavaScript(
                 QString(JS_RETURN_POSSIBLE_COMPLETIONS).arg(
                     toInspect,
-                    toComplete),
-                QString()
+                    toComplete)
+#ifdef HAVE_QT_JS_STACK_TRACES
+                , QString()
+#endif
                 ).toStringList();
 
     foreach (QString c, completions) {
@@ -210,7 +216,11 @@ void REPL::startLoop()
             // Send the user input to the main Phantom frame for evaluation
             m_webframe->evaluateJavaScript(
                         QString(JS_EVAL_USER_INPUT).arg(
-                            QString(userInput).replace('"', "\\\"")), QString("phantomjs://repl-input"));
+                            QString(userInput).replace('"', "\\\""))
+#ifdef HAVE_QT_JS_STACK_TRACES
+                        , QString("phantomjs://repl-input")
+#endif
+                        );
 
             // Save command in the REPL history
             linenoiseHistoryAdd(userInput);
diff --git a/src/utils.cpp b/src/utils.cpp
index 8bbdeca..df2a866 100644
--- a/src/utils.cpp
+++ b/src/utils.cpp
@@ -119,7 +119,11 @@ bool Utils::injectJsInFrame(const QString &jsFilePath, const Encoding &jsFileEnc
         return false;
     }
     // Execute JS code in the context of the document
-    targetFrame->evaluateJavaScript(scriptBody, jsFilePath);
+    targetFrame->evaluateJavaScript(scriptBody
+#ifdef HAVE_QT_JS_STACK_TRACES
+            , jsFilePath
+#endif
+            );
     return true;
 }
 
@@ -138,7 +142,11 @@ bool Utils::loadJSForDebug(const QString& jsFilePath, const Encoding& jsFileEnc,
     targetFrame->setHtml(remoteDebuggerHarnessSrc);
 
     if (autorun) {
-        targetFrame->evaluateJavaScript("__run()", QString());
+        targetFrame->evaluateJavaScript("__run()"
+#ifdef HAVE_QT_JS_STACK_TRACES
+                , QString()
+#endif
+                );
     }
 
     return true;
diff --git a/src/webpage.cpp b/src/webpage.cpp
index c76a4b8..fe6f816 100644
--- a/src/webpage.cpp
+++ b/src/webpage.cpp
@@ -570,7 +570,9 @@ void WebPage::applySettings(const QVariantMap &def)
     opt->setAttribute(QWebSettings::JavascriptEnabled, def[PAGE_SETTINGS_JS_ENABLED].toBool());
     opt->setAttribute(QWebSettings::XSSAuditingEnabled, def[PAGE_SETTINGS_XSS_AUDITING].toBool());
     opt->setAttribute(QWebSettings::LocalContentCanAccessRemoteUrls, def[PAGE_SETTINGS_LOCAL_ACCESS_REMOTE].toBool());
+#ifdef HAVE_QWEBSETTINGS_WEBSECURITYENABLED
     opt->setAttribute(QWebSettings::WebSecurityEnabled, def[PAGE_SETTINGS_WEB_SECURITY_ENABLED].toBool());
+#endif
     opt->setAttribute(QWebSettings::JavascriptCanOpenWindows, def[PAGE_SETTINGS_JS_CAN_OPEN_WINDOWS].toBool());
     opt->setAttribute(QWebSettings::JavascriptCanCloseWindows, def[PAGE_SETTINGS_JS_CAN_CLOSE_WINDOWS].toBool());
 
@@ -679,8 +681,11 @@ QVariant WebPage::evaluateJavaScript(const QString &code)
     qDebug() << "WebPage - evaluateJavaScript" << function;
 
     evalResult = m_currentFrame->evaluateJavaScript(
-                function,                                   //< function evaluated
-                QString("phantomjs://webpage.evaluate()")); //< reference source file
+                function                                    //< function evaluated
+#ifdef HAVE_QT_JS_STACK_TRACES
+                , QString("phantomjs://webpage.evaluate()") //< reference source file
+#endif
+                );
 
     qDebug() << "WebPage - evaluateJavaScript result" << evalResult;
 
@@ -821,7 +826,11 @@ void WebPage::openUrl(const QString &address, const QVariant &op, const QVariant
         networkOp = QNetworkAccessManager::DeleteOperation;
 
     if (networkOp == QNetworkAccessManager::UnknownOperation) {
-        m_mainFrame->evaluateJavaScript("console.error('Unknown network operation: " + operation + "');", QString());
+        m_mainFrame->evaluateJavaScript("console.error('Unknown network operation: " + operation + "');"
+#ifdef HAVE_QT_JS_STACK_TRACES
+                , QString()
+#endif
+                );
         return;
     }
 
@@ -1161,7 +1170,11 @@ bool WebPage::renderPdf(const QString &fileName)
 
     printer.setPageMargins(marginLeft, marginTop, marginRight, marginBottom, QPrinter::Point);
 
+#ifdef HAVE_QWEBFRAME_PRINT_ADDONS
     m_mainFrame->print(&printer, this);
+#else
+    m_mainFrame->print(&printer);
+#endif
     return true;
 }
 
@@ -1180,6 +1193,7 @@ QString WebPage::windowName() const
     return m_mainFrame->evaluateJavaScript("window.name;").toString();
 }
 
+#ifdef HAVE_QWEBFRAME_PRINT_ADDONS
 qreal getHeight(const QVariantMap &map, const QString &key)
 {
     QVariant footer = map.value(key);
@@ -1219,7 +1233,11 @@ QString getHeaderFooter(const QVariantMap &map, const QString &key, QWebFrame *f
             }
         }
     }
-    frame->evaluateJavaScript("console.error('Bad header callback given, use phantom.callback);", QString());
+    frame->evaluateJavaScript("console.error('Bad header callback given, use phantom.callback);"
+#ifdef HAVE_QT_JS_STACK_TRACES
+            , QString()
+#endif
+            );
     return QString();
 }
 
@@ -1232,6 +1250,7 @@ QString WebPage::footer(int page, int numPages)
 {
     return getHeaderFooter(m_paperSize, "footer", m_mainFrame, page, numPages);
 }
+#endif
 
 void WebPage::_uploadFile(const QString &selector, const QStringList &fileNames)
 {
@@ -1255,7 +1274,11 @@ bool WebPage::injectJs(const QString &jsFilePath) {
 }
 
 void WebPage::_appendScriptElement(const QString &scriptUrl) {
-    m_currentFrame->evaluateJavaScript(QString(JS_APPEND_SCRIPT_ELEMENT).arg(scriptUrl), scriptUrl);
+    m_currentFrame->evaluateJavaScript(QString(JS_APPEND_SCRIPT_ELEMENT).arg(scriptUrl)
+#ifdef HAVE_QT_JS_STACK_TRACES
+            , scriptUrl
+#endif
+            );
 }
 
 QObject *WebPage::_getGenericCallback() {
diff --git a/src/webpage.h b/src/webpage.h
index e065bb4..0bdfa27 100644
--- a/src/webpage.h
+++ b/src/webpage.h
@@ -43,7 +43,10 @@ class NetworkAccessManager;
 class QWebInspector;
 class Phantom;
 
-class WebPage : public QObject, public QWebFrame::PrintCallback
+class WebPage: public QObject
+#ifdef HAVE_QWEBFRAME_PRINT_ADDONS
+    , public QWebFrame::PrintCallback
+#endif
 {
     Q_OBJECT
     Q_PROPERTY(QString title READ title)
@@ -128,10 +131,12 @@ public:
 
     void showInspector(const int remotePort = -1);
 
+#ifdef HAVE_QWEBFRAME_PRINT_ADDONS
     QString footer(int page, int numPages);
     qreal footerHeight() const;
     QString header(int page, int numPages);
     qreal headerHeight() const;
+#endif
 
     void setZoomFactor(qreal zoom);
     qreal zoomFactor() const;
-- 
1.7.11.7

