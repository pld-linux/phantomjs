From 82ce4028e1883b4c1fee98be04548698e2ca6c6d Mon Sep 17 00:00:00 2001
From: Dan Callaghan <dcallagh@redhat.com>
Date: Fri, 3 Aug 2012 12:17:32 +1000
Subject: [PATCH 5/8] unbundle qt


diff --git a/src/config.cpp b/src/config.cpp
index 226c98f..2bf3fdb 100644
--- a/src/config.cpp
+++ b/src/config.cpp
@@ -168,7 +168,11 @@ void Config::loadJsonFile(const QString &filePath)
     // Add this object to the global scope
     webPage.mainFrame()->addToJavaScriptWindowObject("config", this);
     // Apply the JSON config settings to this very object
-    webPage.mainFrame()->evaluateJavaScript(configurator.arg(jsonConfig), QString());
+    webPage.mainFrame()->evaluateJavaScript(configurator.arg(jsonConfig)
+#ifdef HAVE_QT_JS_STACK_TRACES
+            , QString()
+#endif
+            );
 }
 
 QString Config::helpText() const
--- phantomjs-2.1.1/src/phantom.cpp	2016-03-22 19:59:31.131744793 +0200
+++ phantomjs-2.1.1/src/phantom.cpp	2016-03-22 20:08:17.872582605 +0200
@@ -381,7 +381,11 @@
         "require.cache['" + filename + "'].exports," +
         "require.cache['" + filename + "']" +
         "));";
-    m_page->mainFrame()->evaluateJavaScript(scriptSource, QString(JAVASCRIPT_SOURCE_PLATFORM_URL).arg(QFileInfo(filename).fileName()));
+    m_page->mainFrame()->evaluateJavaScript(scriptSource
+#ifdef HAVE_QT_JS_STACK_TRACES
+		   	, QString(JAVASCRIPT_SOURCE_PLATFORM_URL).arg(QFileInfo(filename).fileName())
+#endif
+			);
 }
 
 bool Phantom::injectJs(const QString& jsFilePath)
@@ -478,8 +482,11 @@
 
     // Bootstrap the PhantomJS scope
     m_page->mainFrame()->evaluateJavaScript(
-        Utils::readResourceFileUtf8(":/bootstrap.js"),
+        Utils::readResourceFileUtf8(":/bootstrap.js")
+#ifdef HAVE_QT_JS_STACK_TRACES
+		,
         QString(JAVASCRIPT_SOURCE_PLATFORM_URL).arg("bootstrap.js")
+#endif
     );
 }
 
--- phantomjs-2.1.1/src/repl.cpp~	2016-01-24 20:24:05.000000000 +0200
+++ phantomjs-2.1.1/src/repl.cpp	2016-03-22 20:01:59.629454535 +0200
@@ -147,7 +147,11 @@
     linenoiseSetCompletionCallback(REPL::offerCompletion);
 
     // Inject REPL utility functions
-    m_webframe->evaluateJavaScript(Utils::readResourceFileUtf8(":/repl.js"), QString(JAVASCRIPT_SOURCE_PLATFORM_URL).arg("repl.js"));
+    m_webframe->evaluateJavaScript(Utils::readResourceFileUtf8(":/repl.js")
+#ifdef HAVE_QT_JS_STACK_TRACES
+			, QString(JAVASCRIPT_SOURCE_PLATFORM_URL).arg("repl.js")
+#endif
+			);
 
     // Add self to JavaScript world
     m_webframe->addToJavaScriptWindowObject("_repl", this);
@@ -184,8 +188,11 @@
     QStringList completions = REPL::getInstance()->m_webframe->evaluateJavaScript(
                                   QString(JS_RETURN_POSSIBLE_COMPLETIONS).arg(
                                       toInspect,
-                                      toComplete),
+                                      toComplete)
+#ifdef HAVE_QT_JS_STACK_TRACES
+								  ,
                                   QString()
+#endif
                               ).toStringList();
 
     foreach(QString c, completions) {
@@ -210,7 +217,11 @@
             // Send the user input to the main Phantom frame for evaluation
             m_webframe->evaluateJavaScript(
                 QString(JS_EVAL_USER_INPUT).arg(
-                    QString(userInput).replace('"', "\\\"")), QString("phantomjs://repl-input"));
+                    QString(userInput).replace('"', "\\\""))
+#ifdef HAVE_QT_JS_STACK_TRACES
+				, QString("phantomjs://repl-input")
+#endif
+				);
 
             // Save command in the REPL history
             linenoiseHistoryAdd(userInput);
--- phantomjs-2.1.1/src/utils.cpp	2016-03-22 20:03:26.137279205 +0200
+++ phantomjs-2.1.1/src/utils.cpp	2016-03-22 20:16:15.640771018 +0200
@@ -132,7 +132,11 @@
         return false;
     }
     // Execute JS code in the context of the document
-    targetFrame->evaluateJavaScript(scriptBody, QString(JAVASCRIPT_SOURCE_CODE_URL).arg(QFileInfo(scriptPath).fileName()));
+    targetFrame->evaluateJavaScript(scriptBody
+#ifdef HAVE_QT_JS_STACK_TRACES
+			, QString(JAVASCRIPT_SOURCE_CODE_URL).arg(QFileInfo(scriptPath).fileName())
+#endif
+			);
     return true;
 }
 
@@ -147,10 +151,18 @@
     QString scriptBody = jsFromScriptFile(scriptPath, jsFileLanguage, jsFileEnc);
 
     scriptBody = QString("function __run() {\n%1\n}").arg(scriptBody);
-    targetFrame->evaluateJavaScript(scriptBody, QString(JAVASCRIPT_SOURCE_CODE_URL).arg(QFileInfo(scriptPath).fileName()));
+    targetFrame->evaluateJavaScript(scriptBody
+#ifdef HAVE_QT_JS_STACK_TRACES
+			, QString(JAVASCRIPT_SOURCE_CODE_URL).arg(QFileInfo(scriptPath).fileName())
+#endif
+			);
 
     if (autorun) {
-        targetFrame->evaluateJavaScript("__run()", QString());
+        targetFrame->evaluateJavaScript("__run()"
+#ifdef HAVE_QT_JS_STACK_TRACES
+				, QString()
+#endif
+				);
     }
 
     return true;
--- phantomjs-2.1.1/src/webpage.cpp~	2016-03-22 20:03:50.000000000 +0200
+++ phantomjs-2.1.1/src/webpage.cpp	2016-03-22 20:05:19.069859587 +0200
@@ -570,7 +570,9 @@ void WebPage::applySettings(const QVariantMap &def)
     opt->setAttribute(QWebSettings::JavascriptEnabled, def[PAGE_SETTINGS_JS_ENABLED].toBool());
     opt->setAttribute(QWebSettings::XSSAuditingEnabled, def[PAGE_SETTINGS_XSS_AUDITING].toBool());
     opt->setAttribute(QWebSettings::LocalContentCanAccessRemoteUrls, def[PAGE_SETTINGS_LOCAL_ACCESS_REMOTE].toBool());
+#ifdef HAVE_QWEBSETTINGS_WEBSECURITYENABLED
     opt->setAttribute(QWebSettings::WebSecurityEnabled, def[PAGE_SETTINGS_WEB_SECURITY_ENABLED].toBool());
+#endif
     opt->setAttribute(QWebSettings::JavascriptCanOpenWindows, def[PAGE_SETTINGS_JS_CAN_OPEN_WINDOWS].toBool());
     opt->setAttribute(QWebSettings::JavascriptCanCloseWindows, def[PAGE_SETTINGS_JS_CAN_CLOSE_WINDOWS].toBool());
 
@@ -753,8 +755,11 @@
     qDebug() << "WebPage - evaluateJavaScript" << function;
 
     evalResult = m_currentFrame->evaluateJavaScript(
-                     function,                                   //< function evaluated
-                     QString("phantomjs://webpage.evaluate()")); //< reference source file
+                     function                                   //< function evaluated
+#ifdef HAVE_QT_JS_STACK_TRACES
+                     , QString("phantomjs://webpage.evaluate()")
+#endif
+					 ); //< reference source file
 
     qDebug() << "WebPage - evaluateJavaScript result" << evalResult;
 
@@ -821,7 +826,11 @@ void WebPage::openUrl(const QString &address, const QVariant &op, const QVariant
         networkOp = QNetworkAccessManager::DeleteOperation;
 
     if (networkOp == QNetworkAccessManager::UnknownOperation) {
-        m_mainFrame->evaluateJavaScript("console.error('Unknown network operation: " + operation + "');", QString());
+        m_mainFrame->evaluateJavaScript("console.error('Unknown network operation: " + operation + "');"
+#ifdef HAVE_QT_JS_STACK_TRACES
+                , QString()
+#endif
+                );
         return;
     }
 
@@ -1161,7 +1170,11 @@ bool WebPage::renderPdf(const QString &fileName)
 
     printer.setPageMargins(marginLeft, marginTop, marginRight, marginBottom, QPrinter::Point);
 
+#ifdef HAVE_QWEBFRAME_PRINT_ADDONS
     m_mainFrame->print(&printer, this);
+#else
+    m_mainFrame->print(&printer);
+#endif
     return true;
 }
 
@@ -1288,6 +1288,7 @@
     return m_mainFrame->evaluateJavaScript("window.name;").toString();
 }
 
+#ifdef HAVE_QWEBFRAME_PRINT_ADDONS
 qreal getHeight(const QVariantMap& map, const QString& key)
 {
     QVariant footer = map.value(key);
@@ -1219,7 +1233,11 @@ QString getHeaderFooter(const QVariantMap &map, const QString &key, QWebFrame *f
             }
         }
     }
-    frame->evaluateJavaScript("console.error('Bad header callback given, use phantom.callback);", QString());
+    frame->evaluateJavaScript("console.error('Bad header callback given, use phantom.callback);"
+#ifdef HAVE_QT_JS_STACK_TRACES
+            , QString()
+#endif
+            );
     return QString();
 }
 
@@ -1232,6 +1250,7 @@ QString WebPage::footer(int page, int numPages)
 {
     return getHeaderFooter(m_paperSize, "footer", m_mainFrame, page, numPages);
 }
+#endif
 
 void WebPage::_uploadFile(const QString &selector, const QStringList &fileNames)
 {
@@ -1369,7 +1371,11 @@
 
 void WebPage::_appendScriptElement(const QString& scriptUrl)
 {
-    m_currentFrame->evaluateJavaScript(QString(JS_APPEND_SCRIPT_ELEMENT).arg(scriptUrl), scriptUrl);
+    m_currentFrame->evaluateJavaScript(QString(JS_APPEND_SCRIPT_ELEMENT).arg(scriptUrl)
+#ifdef HAVE_QT_JS_STACK_TRACES
+			, scriptUrl
+#endif
+			);
 }
 
 QObject* WebPage::_getGenericCallback()
--- a/src/webpage.h
+++ b/src/webpage.h
@@ -43,7 +43,10 @@ class NetworkAccessManager;
 class QWebInspector;
 class Phantom;
 
-class WebPage : public QObject, public QWebFrame::PrintCallback
+class WebPage: public QObject
+#ifdef HAVE_QWEBFRAME_PRINT_ADDONS
+    , public QWebFrame::PrintCallback
+#endif
 {
     Q_OBJECT
     Q_PROPERTY(QString title READ title)
@@ -128,10 +131,12 @@ public:
 
     void showInspector(const int remotePort = -1);
 
+#ifdef HAVE_QWEBFRAME_PRINT_ADDONS
     QString footer(int page, int numPages);
     qreal footerHeight() const;
     QString header(int page, int numPages);
     qreal headerHeight() const;
+#endif
 
     void setZoomFactor(qreal zoom);
     qreal zoomFactor() const;
